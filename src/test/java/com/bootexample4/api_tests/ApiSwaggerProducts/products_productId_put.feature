# ********RoostGPT********

# Test generated by RoostGPT for test API_Karate_DB_DBRX using AI Type DBRX and AI Model undefined
# 
# Feature file generated for /products/{productId}_put for http method type PUT 
# RoostTestHash=7b2a6b6959
# 
# 

# ********RoostGPT********
Feature: Update a product in the store

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = {'Content-Type': 'application/json'}

  Scenario Outline: Update product with valid input
    Given path '/products/<productId>'
    And request '<updateRequestBody>'
    When method PUT
    Then status 200
    And match response == '<updatedProductSchema>'

    Examples:
      | read('products_productId_put.csv') |

  Scenario: Update product with invalid productId
    Given path '/products/invalidProductId'
    And request '<updateInvalidRequestBody>'
    When method PUT
    Then status 404
    And match response == '<notFoundResponse>'
# Update request body schema
# This section was originally placed at the end of the feature file, breaking the syntax
# It should be placed at the top, before the scenarios
# Define schema:
    * def updateRequestBodySchema = { type: 'object', required: ['name'], properties: { id: { type: 'integer', format: 'int64', example: 10 }, name: { type: 'string', example: 'apple' }, description: { type: 'string', example: 'description of the product' }, price: { type: 'integer', format: 'int64', example: 20 } }, example: { name: 1, description: 'mango', price: 50 } }
# Updated product schema
    * def updatedProductSchema = { type: 'object', required: ['name'], properties: { id: { type: 'integer', format: 'int64', example: 10 }, name: { type: 'string', example: 'apple' }, description: { type: 'string', example: 'description of the product' }, price: { type: 'integer', format: 'int64', example: 20 } }, example: { id: 4, name: '1', description: 'mango', price: 50 } }
# Not found response schema
    * def notFoundResponse = { description: 'Not Found' }
# Update invalid request body schema
    * def updateInvalidRequestBody = { type: 'object', required: ['name'], properties: { price: { type: 'integer', format: 'int64', example: 20 }, description: { type: 'string', example: 'mango' }, id: { type: 'integer', format: 'int64', example: 10 } }, example: { name: 'apple' } }
