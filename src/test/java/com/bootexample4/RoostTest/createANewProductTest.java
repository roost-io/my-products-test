/*
Test generated by RoostGPT for test products-integration-rest-assured using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create a new product\r\n' +
    '    Given the client provides the following product data:\r\n' +
    '      | name        | description              | price |\r\n' +
    '      | Test Product | This is a test product. | 10.0  |\r\n' +
    '    When the client sends a POST request to "/api/products"\r\n' +
    '    Then the saved product should not be null and its properties must correspond to those provided by client',
  title: 'Create a new product'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

public class createANewProductTest {
   
    private String baseURI;

    @BeforeEach
    public void setUp() {
        baseURI = System.getenv("ROOST_SERVER_URL") + "/api/products";
    }

    @Test
    public void createNewProduct() {
        // Prepare test data
        Map<String, Object> product = new HashMap<>();
        product.put("name", "Test Product");
        product.put("description", "This is a test product.");
        product.put("price", 10.0);
       
        // Send POST request
        Response response = RestAssured.given()
                .contentType("application/json")
                .body(product)
                .when()
                .post(baseURI);

        // Validate the response
       response.then().statusCode(200)
               .body("name", equalTo(product.get("name")))
               .body("description", equalTo(product.get("description")))
               .body("price", equalTo(product.get("price")))
               .body("id", notNullValue());  // Assert that id of created product is not null

        /* Comment: In this scenario, we are sending a POST request to create a new product with given attributes:
         * name, description and price. After successful product creation, the server should return 200 status and 
         * the response body should contain the product details. We verify that returned product details match with
         * the details we sent in request and that id of the created product is not null.
         */
    }
}
