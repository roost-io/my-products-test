/*
Test generated by RoostGPT for test products-integration-rest-assured using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Update an existing product\r\n' +
    '    Given there is an existing product with ID 1\r\n' +
    '    And the client provides the following product data:\r\n' +
    '      | name           | description                      | price |\r\n' +
    '      | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '    When the client sends a PUT request to "/api/products/1"\r\n' +
    '    Then the product with ID 1 should be updated with the provided details',
  title: 'Update an existing product'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import io.restassured.response.Response;
import static io.restassured.RestAssured.*;
import static org.assertj.core.api.Assertions.*;

public class updateAnExistingProductTest {

    @Test
    @DisplayName("Update an existing product")
    public void testUpdateAnExistingProduct() {

        int productId = 1;
        String URL = System.getenv("ROOST_SERVER_URL") + "/products/"+productId;

        // Given there is an existing product with ID 1
        get(URL)
          .then()
          .statusCode(200)
          .body("id", equalTo(productId));

        // And the client provides the following product data
        String payload = "{ \"name\": \"Updated Product\", \"description\": \"This is an updated test product.\", \"price\": 15.0 }";

        // When the client sends a PUT request to "/api/products/1"
        Response response = 
            given()
              .header("Content-Type", "application/json")
              .body(payload)
            .when()
              .put(URL);

        // Then the product with ID 1 should be updated with the provided details
        response
            .then()
            .statusCode(200)
            .body("id", equalTo(productId))
            .body("name", equalTo("Updated Product"))
            .body("description", equalTo("This is an updated test product."))
            .body("price", equalTo(15));

        // Assert the response with the body
        assertThat(response.statusCode()).isEqualTo(200);
        assertThat(response.jsonPath().getInt("id")).isEqualTo(productId);
        assertThat(response.jsonPath().getString("name")).isEqualTo("Updated Product");
        assertThat(response.jsonPath().getString("description")).isEqualTo("This is an updated test product.");
        assertThat(response.jsonPath().getFloat("price")).isEqualTo(15.0f);
    }
}
