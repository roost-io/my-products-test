/*
Test generated by RoostGPT for test demo23 using AI Type Open AI and AI Model gpt-4

1. Scenario: Update existing product
   - Given a product with ID exists in the repository
   - When we call updateProduct with the existing product's ID and a new product object
   - Then the existing product should be updated with the new product's details and the updated product should be returned.

2. Scenario: Update non-existing product
   - Given a product with ID does not exist in the repository
   - When we call updateProduct with the non-existing product's ID and a new product object
   - Then the method should return a ResponseEntity with a 'not found' status.

3. Scenario: Update product with null values
   - Given a product with ID exists in the repository
   - When we call updateProduct with the existing product's ID and a new product object containing null values
   - Then the existing product should be updated with the null values and the updated product should be returned.

4. Scenario: Update product with empty values
   - Given a product with ID exists in the repository
   - When we call updateProduct with the existing product's ID and a new product object containing empty values
   - Then the existing product should be updated with the empty values and the updated product should be returned.

5. Scenario: Update product with same values
   - Given a product with ID exists in the repository
   - When we call updateProduct with the existing product's ID and a new product object containing the same values as the existing product
   - Then the existing product should not be modified and the same product should be returned.

6. Scenario: Update product with invalid ID
   - Given a product with ID exists in the repository
   - When we call updateProduct with an invalid product ID and a new product object
   - Then the method should return a ResponseEntity with a 'not found' status.
*/
package com.bootexample4.products.controller;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.ResponseEntity;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;

@RunWith(MockitoJUnitRunner.class)
public class ProductController_updateProduct_9454a9af90_Test {
    @InjectMocks
    ProductController productController;

    @Mock
    ProductRepository productRepository;

    @Test
    public void testUpdateExistingProduct() {
        Product existingProduct = new Product("Product1", "Description1", 100.0);
        Product newProduct = new Product("Product2", "Description2", 200.0);
        when(productRepository.findById(1L)).thenReturn(Optional.of(existingProduct));
        when(productRepository.save(existingProduct)).thenReturn(newProduct);
        ResponseEntity<Product> response = productController.updateProduct(1L, newProduct);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(newProduct, response.getBody());
    }

    @Test
    public void testUpdateNonExistingProduct() {
        Product newProduct = new Product("Product2", "Description2", 200.0);
        when(productRepository.findById(1L)).thenReturn(Optional.empty());
        ResponseEntity<Product> response = productController.updateProduct(1L, newProduct);
        assertEquals(404, response.getStatusCodeValue());
    }

    @Test
    public void testUpdateProductWithNullValues() {
        Product existingProduct = new Product("Product1", "Description1", 100.0);
        Product newProduct = new Product(null, null, null);
        when(productRepository.findById(1L)).thenReturn(Optional.of(existingProduct));
        when(productRepository.save(existingProduct)).thenReturn(newProduct);
        ResponseEntity<Product> response = productController.updateProduct(1L, newProduct);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(newProduct, response.getBody());
    }

    @Test
    public void testUpdateProductWithEmptyValues() {
        Product existingProduct = new Product("Product1", "Description1", 100.0);
        Product newProduct = new Product("", "", 0.0);
        when(productRepository.findById(1L)).thenReturn(Optional.of(existingProduct));
        when(productRepository.save(existingProduct)).thenReturn(newProduct);
        ResponseEntity<Product> response = productController.updateProduct(1L, newProduct);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(newProduct, response.getBody());
    }

    @Test
    public void testUpdateProductWithSameValues() {
        Product existingProduct = new Product("Product1", "Description1", 100.0);
        when(productRepository.findById(1L)).thenReturn(Optional.of(existingProduct));
        when(productRepository.save(existingProduct)).thenReturn(existingProduct);
        ResponseEntity<Product> response = productController.updateProduct(1L, existingProduct);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(existingProduct, response.getBody());
    }

    @Test
    public void testUpdateProductWithInvalidID() {
        Product newProduct = new Product("Product2", "Description2", 200.0);
        when(productRepository.findById(1L)).thenReturn(Optional.empty());
        ResponseEntity<Product> response = productController.updateProduct(1L, newProduct);
        assertEquals(404, response.getStatusCodeValue());
    }
}
