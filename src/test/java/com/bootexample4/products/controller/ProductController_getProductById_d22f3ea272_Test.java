/*
Test generated by RoostGPT for test demo23 using AI Type Open AI and AI Model gpt-4

1. **Scenario: Product with given ID exists in the repository**
   - Given: A ProductRepository with products.
   - When: The function getProductById is called with an ID of an existing product.
   - Then: The function should return a ResponseEntity with the product and status OK.

2. **Scenario: Product with given ID does not exist in the repository**
   - Given: A ProductRepository with products.
   - When: The function getProductById is called with an ID that does not correspond to any product in the repository.
   - Then: The function should return a ResponseEntity with status Not Found.

3. **Scenario: ProductRepository is empty**
   - Given: An empty ProductRepository.
   - When: The function getProductById is called with any ID.
   - Then: The function should return a ResponseEntity with status Not Found.

4. **Scenario: ProductRepository is not available**
   - Given: The ProductRepository is unavailable (for instance, due to a database connection issue).
   - When: The function getProductById is called with any ID.
   - Then: An appropriate exception should be thrown.

5. **Scenario: The ID provided is null**
   - Given: A ProductRepository with products.
   - When: The function getProductById is called with a null ID.
   - Then: An appropriate exception should be thrown.

6. **Scenario: The ID provided is a negative number**
   - Given: A ProductRepository with products.
   - When: The function getProductById is called with a negative ID.
   - Then: An appropriate exception should be thrown.

Note: The last two scenarios depend on how the function handles invalid input. If the function has preconditions that ID must be non-null and non-negative, then those scenarios are valid. If not, you would need to adjust them according to your function's specifications.
*/
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;
import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

public class ProductServiceTest {

    private ProductRepository productRepository;
    private ProductService productService;

    @BeforeEach
    public void setUp() {
        productRepository = Mockito.mock(ProductRepository.class);
        productService = new ProductService(productRepository);
    }

    @Test
    public void getProductById_ExistingId_ReturnsProduct() {
        Product product = new Product();
        when(productRepository.findById(1L)).thenReturn(Optional.of(product));

        ResponseEntity<Product> response = productService.getProductById(1L);

        assertEquals(ResponseEntity.ok().body(product), response);
    }

    @Test
    public void getProductById_NonExistingId_ReturnsNotFound() {
        when(productRepository.findById(1L)).thenReturn(Optional.empty());

        ResponseEntity<Product> response = productService.getProductById(1L);

        assertEquals(ResponseEntity.notFound().build(), response);
    }

    @Test
    public void getProductById_EmptyRepository_ReturnsNotFound() {
        when(productRepository.findById(1L)).thenReturn(Optional.empty());

        ResponseEntity<Product> response = productService.getProductById(1L);

        assertEquals(ResponseEntity.notFound().build(), response);
    }

    @Test
    public void getProductById_RepositoryUnavailable_ThrowsException() {
        when(productRepository.findById(1L)).thenThrow(new RuntimeException());

        assertThrows(RuntimeException.class, () -> productService.getProductById(1L));
    }

    @Test
    public void getProductById_NullId_ThrowsException() {
        assertThrows(IllegalArgumentException.class, () -> productService.getProductById(null));
    }

    @Test
    public void getProductById_NegativeId_ThrowsException() {
        assertThrows(IllegalArgumentException.class, () -> productService.getProductById(-1L));
    }
}
