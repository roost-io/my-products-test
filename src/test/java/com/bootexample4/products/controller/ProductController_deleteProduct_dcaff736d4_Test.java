/*
Test generated by RoostGPT for test demo23 using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
Product with given ID exists
- Given a product with ID exists in the repository
- When the deleteProduct method is called with this ID
- Then the product should be deleted from the repository
- And the method should return a ResponseEntity with HTTP status code 200 OK

Test Scenario 2: 
Product with given ID does not exist
- Given a product with ID does not exist in the repository
- When the deleteProduct method is called with this ID
- Then the method should return a ResponseEntity with HTTP status code 404 Not Found

Test Scenario 3: 
Product ID is null
- Given a product ID is null
- When the deleteProduct method is called with this ID
- Then the method should throw an IllegalArgumentException or return a ResponseEntity with HTTP status code 400 Bad Request

Test Scenario 4: 
Product ID is negative
- Given a product ID is negative
- When the deleteProduct method is called with this ID
- Then the method should throw an IllegalArgumentException or return a ResponseEntity with HTTP status code 400 Bad Request

Test Scenario 5: 
Product ID is zero
- Given a product ID is zero
- When the deleteProduct method is called with this ID
- Then the method should throw an IllegalArgumentException or return a ResponseEntity with HTTP status code 400 Bad Request

Test Scenario 6: 
Repository is down or unreachable
- Given the product repository is down or unreachable
- When the deleteProduct method is called with any ID
- Then the method should return a ResponseEntity with HTTP status code 500 Internal Server Error
*/
/*
Test generated by RoostGPT for test demo23 using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
Product with given ID exists
- Given a product with ID exists in the repository
- When the deleteProduct method is called with this ID
- Then the product should be deleted from the repository
- And the method should return a ResponseEntity with HTTP status code 200 OK

Test Scenario 2: 
Product with given ID does not exist
- Given a product with ID does not exist in the repository
- When the deleteProduct method is called with this ID
- Then the method should return a ResponseEntity with HTTP status code 404 Not Found

Test Scenario 3: 
Product ID is null
- Given a product ID is null
- When the deleteProduct method is called with this ID
- Then the method should throw an IllegalArgumentException or return a ResponseEntity with HTTP status code 400 Bad Request

Test Scenario 4: 
Product ID is negative
- Given a product ID is negative
- When the deleteProduct method is called with this ID
- Then the method should throw an IllegalArgumentException or return a ResponseEntity with HTTP status code 400 Bad Request

Test Scenario 5: 
Product ID is zero
- Given a product ID is zero
- When the deleteProduct method is called with this ID
- Then the method should throw an IllegalArgumentException or return a ResponseEntity with HTTP status code 400 Bad Request

Test Scenario 6: 
Repository is down or unreachable
- Given the product repository is down or unreachable
- When the deleteProduct method is called with any ID
- Then the method should return a ResponseEntity with HTTP status code 500 Internal Server Error
*/

package com.bootexample4.products.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.*;

import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;

public class ProductControllerTest {

    @InjectMocks
    private ProductController controller;

    @Mock
    private ProductRepository productRepository;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testDeleteProduct_whenProductExists() {
        Long id = 1L;
        Product product = new Product();
        when(productRepository.findById(id)).thenReturn(Optional.of(product));

        ResponseEntity<Object> result = controller.deleteProduct(id);
        verify(productRepository).delete(product);

        assertEquals(HttpStatus.OK, result.getStatusCode());
    }

    @Test
    public void testDeleteProduct_whenProductDoesNotExist() {
        Long id = 1L;
        when(productRepository.findById(id)).thenReturn(Optional.empty());

        ResponseEntity<Object> result = controller.deleteProduct(id);

        assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());
    }

    @Test
    public void testDeleteProduct_whenIdIsNull() {
        assertThrows(IllegalArgumentException.class, () -> {
            controller.deleteProduct(null);
        });
    }

    @Test
    public void testDeleteProduct_whenIdIsNegative() {
        assertThrows(IllegalArgumentException.class, () -> {
            controller.deleteProduct(-1L);
        });
    }

    @Test
    public void testDeleteProduct_whenIdIsZero() {
        assertThrows(IllegalArgumentException.class, () -> {
            controller.deleteProduct(0L);
        });
    }

    @Test
    public void testDeleteProduct_whenRepositoryIsDown() {
        Long id = 1L;
        when(productRepository.findById(id)).thenThrow(new RuntimeException());

        ResponseEntity<Object> result = controller.deleteProduct(id);

        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, result.getStatusCode());
    }
}
