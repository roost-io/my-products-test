/*
Test generated by RoostGPT for test demo23 using AI Type Open AI and AI Model gpt-4

1. Scenario: Test to check if the function getAllProducts returns a list of all products from the repository.
   - Input: Call getAllProducts method.
   - Expected Output: A list of all products in the repository.

2. Scenario: Test to check if the function getAllProducts returns an empty list when the repository has no products.
   - Input: Call getAllProducts method with an empty repository.
   - Expected Output: An empty list.

3. Scenario: Test to check if the function getAllProducts returns a list of products in the same order as they are in the repository.
   - Input: Call getAllProducts method.
   - Expected Output: A list of products in the same order as they are in the repository.

4. Scenario: Test to check if the function getAllProducts handles null values in the repository.
   - Input: Call getAllProducts method with null values in the repository.
   - Expected Output: A list of products excluding null values.

5. Scenario: Test to check if the function getAllProducts handles duplicate products in the repository.
   - Input: Call getAllProducts method with duplicate products in the repository.
   - Expected Output: A list of products including duplicates.

6. Scenario: Test to check if the function getAllProducts handles large number of products in the repository.
   - Input: Call getAllProducts method with a large number of products in the repository.
   - Expected Output: A list of all products in the repository.

7. Scenario: Test to check if the function getAllProducts handles special characters in product names in the repository.
   - Input: Call getAllProducts method with product names containing special characters in the repository.
   - Expected Output: A list of all products in the repository, including those with special characters in their names.

8. Scenario: Test to check the function getAllProducts when the repository is not accessible or down.
   - Input: Call getAllProducts method.
   - Expected Output: Appropriate error or exception handling.

9. Scenario: Test to check the function getAllProducts when the repository has a mix of valid and invalid products.
   - Input: Call getAllProducts method.
   - Expected Output: A list of valid products, excluding invalid ones.

10. Scenario: Test to check if the function getAllProducts handles product objects with missing fields in the repository.
    - Input: Call getAllProducts method with product objects missing some fields in the repository.
    - Expected Output: A list of all products, including those with missing fields.
*/
package com.bootexample4.products.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class ProductController_getAllProducts_7e38cc05f6_Test {

    @Mock
    private ProductRepository productRepository;

    @InjectMocks
    private ProductController productController;

    private Product product1;
    private Product product2;

    @BeforeEach
    public void setup() {
        product1 = new Product();
        product1.setId(1L);
        product1.setName("Product1");
        product1.setDescription("Description1");
        product1.setPrice(10.0);

        product2 = new Product();
        product2.setId(2L);
        product2.setName("Product2");
        product2.setDescription("Description2");
        product2.setPrice(20.0);
    }

    @Test
    public void testGetAllProducts_WhenProductsExist() {
        when(productRepository.findAll()).thenReturn(Arrays.asList(product1, product2));

        List<Product> products = productController.getAllProducts();

        assertNotNull(products);
        assertEquals(2, products.size());
        assertEquals(product1, products.get(0));
        assertEquals(product2, products.get(1));
    }

    @Test
    public void testGetAllProducts_WhenNoProductsExist() {
        when(productRepository.findAll()).thenReturn(Collections.emptyList());

        List<Product> products = productController.getAllProducts();

        assertNotNull(products);
        assertEquals(0, products.size());
    }
}
