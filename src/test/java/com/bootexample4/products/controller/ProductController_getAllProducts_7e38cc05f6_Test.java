// Test generated by RoostGPT for test expressscriptsdemo using AI Type Open AI and AI Model gpt-4

package com.bootexample4.products.controller;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.mockito.BDDMockito.given;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;

import java.util.Arrays;
import java.util.List;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
public class ProductController_getAllProducts_7e38cc05f6_Test {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ProductRepository productRepository;

    @Test
    public void testGetAllProducts() throws Exception {
        Product product1 = new Product();
        product1.setName("Product 1");
        product1.setDescription("Description 1");
        product1.setPrice(100.0);

        Product product2 = new Product();
        product2.setName("Product 2");
        product2.setDescription("Description 2");
        product2.setPrice(200.0);

        List<Product> productList = Arrays.asList(product1, product2);

        given(productRepository.findAll()).willReturn(productList);

        mockMvc.perform(MockMvcRequestBuilders
                .get("/products")
                .accept("application/json"))
                .andExpect(status().isOk());
    }

    @Test
    public void testGetAllProducts_EmptyList() throws Exception {
        given(productRepository.findAll()).willReturn(Arrays.asList());

        mockMvc.perform(MockMvcRequestBuilders
                .get("/products")
                .accept("application/json"))
                .andExpect(status().isOk());
    }
}
